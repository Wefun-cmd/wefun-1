game.h
#include<stdio.h>
#include<math.h>
#include<time.h>
#include<stdlib.h>
#define ROW 3
#define COL 3
void Initboard(char board[ROW][COL], int row, int col);
void Displayboard(char board[ROW][COL], int row, int col);
void playermove(char board[ROW][COL],int row, int col);
void computermove(char board[ROW][COL], int row, int col);
//告诉四种游戏状态
//玩家赢 - '#'
//电脑赢 - '*'
//平局 - 'Q'
//继续游戏 - 'C'
char Iswin(char board[ROW][COL],int row,int col);
int Isfull(char board[ROW][COL], int row, int col);

game.c
#include"game.h"
void Initboard(char board[ROW][COL], int row, int col)
{
	int i, j;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			board[i][j] = ' ';
		}
	}
}
//void Displayboard(char board[ROW][COL], int row, int col)
//{
//	int i=0;
//	for (i = 0; i < row; i++)
//	{
//		printf(" %c | %c | %c\n",board[i][0],board[i][1],board[i][2]);//打印一行的数据
//		if(i<row-1)
//		printf("---|---|---\n");//打印分割行
//	}
//}

void Displayboard(char board[ROW][COL], int row, int col)
{
	int i = 0;
	for (i = 0; i < row; i++)
	{
		//printf(" %c | %c | %c\n", board[i][0], board[i][1], board[i][2]);//打印一行的数据
		int j = 0;
		for (j = 0; j < col; j++)
		{
			printf(" %c ", board[i][j]);
			if(j<col-1)
			printf("|");
		}
		printf("\n");
		if (i < row - 1)//打印分割行
		{
			for (j = 0; j < col; j++)
			{
				printf("---");
				if(j<col-1)
				printf("|");
			}
			printf("\n");
		}
			
	}
}
void playermove(char board[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	printf("玩家走:\n");	
	while (1)
	{
		printf("请输入要下的坐标Z:\n");
		scanf_s("%d%d", &x, &y);
		//判断x,y坐标的合法性
		if (x >= 1 && x <= row && y >= 1 && y <= col)
		{
			if (board[x - 1][y - 1] == ' ')
			{
				board[x - 1][y - 1] = '*';
				break;
			}
			else
			{
				printf("该坐标已被占用\n");
			}
		}
		else
		{
			printf("坐标不合法,请重新输入：\n");
		}
	}
}
void computermove(char board[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	printf("电脑走:\n");
	x = rand() % row;
	y = rand() % col;
	while (1)
	{
		if (board[x][y] == ' ')
		{
			board[x][y] = '$';
			break;
		}
		else
		{
			printf("该坐标已被占用\n");
		}
	}
}
int Isfull(char board[ROW][COL], int row, int col)//返回1表示棋盘满了，0表示没满
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			if (board[i][j] == ' ')
				return 0;//没满
		}
	}
	return 1;//满了
}
char Iswin(char board[ROW][COL], int row, int col)
{
	int i = 0;
	for (i = 0; i < row; i++)//横三行
	{
		if (board[i][0] == board[i][1] && board[i][1] == board[i][2]&&board[i][1]!=' ')
		{
			return board[i][1];
		}
	}
	for (i = 0; i < col; i++)//竖三列
	{
		if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[1][i] != ' ')
		{
			return board[1][i];
		}
	}
	//两个对角线
	if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[1][1] != ' ')
	{
		return board[1][1];
	}
	if (board[2][0] == board[1][1] && board[1][1] == board[0][2] && board[1][1] != ' ')
	{
		return board[1][1];
	}
	//判断是否平局
	if (i == Isfull(board, ROW, COL))
	{
		return 'Q';
	}
	else
		return 'C';
}

main.c
#include"game.h"
//三子棋小游戏
void menu()
{
	printf("****************************\n");
	printf("****  1.play   0.exit  *****\n");
	printf("****************************\n");
}
void game()//算法实现
{
	char ret = 0;
	char board[ROW][COL] = {0};//全部空格
	Initboard(board,ROW,COL);//初始化棋盘
	//打印棋盘
	Displayboard(board,ROW,COL);
	//下棋
	while (1)
	{
		//先玩家下棋，后电脑下棋
		playermove(board,ROW,COL);
		Displayboard(board,ROW,COL);
		//判断玩家是否赢
		ret=Iswin(board,ROW,COL);
		if (ret != 'C')
		{
			break;
		}
		computermove(board, ROW, COL);
		Displayboard(board, ROW, COL);
		//判断电脑是否赢
		ret=Iswin(board,ROW,COL);
		if (ret != 'C')
		{
			break;
		}
	}
	if (ret == '*')
	{
		printf("玩家赢\n");
	}
	else if (ret == '$')
	{
		printf("电脑赢\n");
	}
	else
	{
		printf("平局\n");
	}
}
void test()
{
	int input=0;
	srand((unsigned int)time(NULL));//时间戳
	do
	{
		menu();
		
		printf("请选择:>");
		scanf_s("%d", &input);
		switch (input)
		{
		case 1:
			game();
			break;
		case 0:
			printf("退出游戏\n");
			break;
		default:
			printf("选择错误\n");
			break;
		}
	} while (input);
}
int main()
{
	test();
	return 0;
}
